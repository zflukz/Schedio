name: Discord Bot Notify

on:
  push:
    branches:
      - '**'
  delete:
    branches:
      - '**'

jobs:
  discord-notify:
    runs-on: ubuntu-latest
    steps:
      
      - name: Check for jq utility
        run: |
          # Ensure jq is available for JSON processing
          if ! command -v jq &> /dev/null
          then
              echo "jq could not be found. Installing it now."
              sudo apt-get update && sudo apt-get install -y jq
          fi

      - name: Determine Thread and Message Details
        id: determine
        run: |
          # Get branch name and repository
          branch="${GITHUB_REF#refs/heads/}"
          repo="${GITHUB_REPOSITORY}"
          
          # Initialize variables
          THREAD_ID=""
          COLOR=""

          # 1. Thread Mapping (sets THREAD_ID and initial COLOR)
          if [[ $branch == frontend_* ]]; then
            THREAD_ID="${{ secrets.DISCORD_THREAD_FRONTEND }}"
            COLOR=3066993 # Green/Blue
          elif [[ $branch == backend_* ]]; then
            THREAD_ID="${{ secrets.DISCORD_THREAD_BACKEND }}"
            COLOR=3066993
          elif [[ $branch == Test_product* ]]; then
            THREAD_ID="${{ secrets.DISCORD_THREAD_PRODUCT }}"
            COLOR=3066993
          else
            echo "No matching thread ID found for branch: $branch. Skipping notification."
            echo "::set-output name=send_notification::false"
            exit 0 # Exit this step gracefully
          fi

          # 2. Content Generation (overwrites COLOR if delete event)
          if [[ "${{ github.event_name }}" == "push" ]]; then
            TITLE="Branch Pushed 🚀"
            # Extract and format commit messages using jq
            COMMITS=$(jq -r '.commits[] | "- **" + .message + "** by " + .author.name' <<< '${{ toJson(github.event.commits) }}')
            DESCRIPTION="[${repo}] branch pushed: **$branch**\n\n$COMMITS"
          else # delete event
            TITLE="Branch Deleted 🗑️"
            DESCRIPTION="[${repo}] branch deleted: **$branch**"
            COLOR=15158332 # Red/Pink
          fi
          
          # Export variables for the next step
          echo "::set-output name=thread_id::$THREAD_ID"
          echo "::set-output name=color::$COLOR"
          echo "::set-output name=title::$TITLE"
          echo "::set-output name=description::$DESCRIPTION"
          echo "::set-output name=send_notification::true"


      - name: Send Discord Message via Bot API
        # Only run if a thread ID was found
        if: steps.determine.outputs.send_notification == 'true'
        run: |
          # Construct JSON payload using jq
          json=$(jq -n \
            --arg title "${{ steps.determine.outputs.title }}" \
            --arg description "${{ steps.determine.outputs.description }}" \
            --argjson color ${{ steps.determine.outputs.color }} \
            '{
              embeds: [
                {
                  title: $title,
                  description: $description,
                  color: $color
                }
              ]
            }')

          # Send message using curl. The -f/--fail flag ensures curl returns an error 
          # code if the HTTP response is 4xx or 5xx (e.g., Auth failure).
          curl -X POST \
            --fail \
            -H "Authorization: Bot ${{ secrets.DISCORD_BOT_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d "$json" \
            "https://discord.com/api/v10/channels/${{ steps.determine.outputs.thread_id }}/messages"
